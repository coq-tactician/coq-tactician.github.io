<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API on Tactician</title>
    <link>https://coq-tactician.github.io/api/</link>
    <description>Recent content in API on Tactician</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://coq-tactician.github.io/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API Introduction</title>
      <link>https://coq-tactician.github.io/api/introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coq-tactician.github.io/api/introduction/</guid>
      <description>Tactician&amp;rsquo;s API provides external machine learning agents with Coq&amp;rsquo;s internal knowledge-base of mathematics. It can extract large-scale datasets from a wide variety of Coq packages for the purpose of offline machine learning. Additionally, it allows agents to interact with Coq. Proving servers can be connected to Tactician&amp;rsquo;s synth tactic and prove theorems for Coq users. Additionally, servers can do proof exploration through the Tactician Explore command. Examples of external proving agents include Graph2Tac &amp;amp; Text2Tac.</description>
    </item>
    
    <item>
      <title>Graph2Tac &amp; Text2Tac</title>
      <link>https://coq-tactician.github.io/api/graph2tac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coq-tactician.github.io/api/graph2tac/</guid>
      <description>Graph2Tac is a novel neural network architecture for predicting appropriate tactics for proof states. The crucial innovation of Graph2Tac is that it can build an understanding of the math concepts in an entire Coq development and all of its dependencies on-the-fly. That is, it analyzes the structure of definitions and lemmas and builds an internal representation of each object in the global context. Then, when presented with a proof state that references these mathematical concepts, Graph2Tac can leverage its deep knowledge to predict tactics and arguments.</description>
    </item>
    
    <item>
      <title>Coq Commands</title>
      <link>https://coq-tactician.github.io/api/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coq-tactician.github.io/api/commands/</guid>
      <description>The package coq-tactician-api makes some commands available in addition to the usual commands listed in the manual. You should install this package when you wish to build your own external agent. (Both Graph2Tac and Text2Tac depend on this package.)
Graph Visualizations These commands will create a graph of some object, and write it to graph.pdf (if graphviz is available).
The following commands are always available:
[Shared] Graph [Depth &amp;lt;n&amp;gt;] Ident identifier.</description>
    </item>
    
    <item>
      <title>PyTactician</title>
      <link>https://coq-tactician.github.io/api/pytactician/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coq-tactician.github.io/api/pytactician/</guid>
      <description>PyTactician is a library to help write proving agents and explore datasets. The major version number x of this library indicates the version of the dataset and communication protocol. Any PyTactician version x.y is compatible with the communication protocol x.
Installation Binary wheels are provided for Linux and MacOS (on PyPI). On those platforms you can install by executing pip install pytactician. If you need to install from source, you need to have Cap&amp;rsquo;n Proto &amp;gt;= 0.</description>
    </item>
    
    <item>
      <title>Datasets</title>
      <link>https://coq-tactician.github.io/api/datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://coq-tactician.github.io/api/datasets/</guid>
      <description>Datasets are published on Zenodo:
Data for API v15 on Coq v8.11 Interactively explore the dataset here. The dataset includes hierarchies of modules, global context information, definitions, tactical proofs and tactic proof transformations.
The data is encoded using the Cap&amp;rsquo;n Proto serialization protocol, allowing for fast random access to the graph and metadata from many programming languages. The (latest) schema file can be found in graph_api.capnp. For each Coq compilation unit X, the dataset includes the original X.</description>
    </item>
    
  </channel>
</rss>
