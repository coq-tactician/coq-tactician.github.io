[
  {
    "url": "https://coq-tactician.github.io/manual/",
    "title": "Manual",
    "description": "",
    "content": "Getting Started (experienced Coq users) This is a super-short guide for people with prior experience with Coq and Coq packages. If you\u0026rsquo;d like a more in-depth guide, see installation.\nInstallation opam install coq-tactician tactician enable # Optional but recoomended, adds Tactician to your coqrc tactician inject # Optional, instrument installation of Opam packages opam install coq-tactician-stdlib # Optional, recompiles standard library Basic Usage If you have chosen to run tactician enable during installation, Tactician will be immediately ready to go. The two most important commands of Tactician are Suggest and search. Both should be used in proof mode. You can try them out on our example file. A more comprehensive description of Tactician\u0026rsquo;s commands can be found in usage. To instrument packages with Tactician support, see Coq packages.\n"
  },
  {
    "url": "https://coq-tactician.github.io/people/",
    "title": "People",
    "description": "",
    "content": "The following people are (or have been) involved in the development of Tactician:\n Lasse Blaauwbroek Josef Urban Herman Geuvers Liao Zhang Bartosz Piotrowski Cezary Kaliszyk  "
  },
  {
    "url": "https://coq-tactician.github.io/publications/",
    "title": "Publications",
    "description": "",
    "content": "  Online Machine Learning Techniques for Coq: A Comparison Abstract: We present a comparison of several online machine learning techniques for tactical learning and proving in the Coq proof assistant. This work builds on top of Tactician, a plugin for Coq that learns from proofs written by the user to synthesize new proofs. Learning happens in an online manner, meaning that Tactician’s machine learning model is updated immediately every time the user performs a step in an interactive proof. This has important advantages compared to the more studied offline learning systems: (1) it provides the user with a seamless, interactive experience with Tactician and, (2) it takes advantage of locality of proof similarity, which means that proofs similar to the current proof are likely to be found close by. We implement two online methods, namely approximate k-nearest neighbors based on locality sensitive hashing forests and random decision forests. Additionally, we conduct experiments with gradient boosted trees in an offline setting using XGBoost. We compare the relative performance of Tactician using these three learning methods on Coq’s standard library.\n  The Tactician: A Seamless, Interactive Tactic Learner and Prover for Coq\nNote: An extended version of this paper is available on arXiv\nAbstract: We present Tactician, a tactic learner and prover for the Coq Proof Assistant. Tactician helps users make tactical proof decisions while they retain control over the general proof strategy. To this end, Tactician learns from previously written tactic scripts and gives users either suggestions about the next tactic to be executed or altogether takes over the burden of proof synthesis. Tactician’s goal is to provide users with a seamless, interactive, and intuitive experience together with robust and adaptive proof automation.\n  Tactic Learning and Proving for the Coq Proof Assistant\nAbstract: We present a system that utilizes machine learning for tactic proof search in the Coq Proof Assistant. In a similar vein as the TacticToe project for HOL4, our system predicts appropriate tactics and finds proofs in the form of tactic scripts. To do this, it learns from previous tactic scripts and how they are applied to proof states. The performance of the system is evaluated on the Coq Standard Library. Currently, our predictor can identify the correct tactic to be applied to a proof state 23.4% of the time. Our proof searcher can fully automatically prove 39.3% of the lemmas. When combined with the CoqHammer system, the two systems together prove 56.7% of the library’s lemmas.\n  "
  },
  {
    "url": "https://coq-tactician.github.io/manual/installation/",
    "title": "Installation",
    "description": "",
    "content": "Windows We recommend that you install Tactician either in a virtual machine, or under the Windows Subsystem for Linux. Instructions for installing Coq in this environment can be found here. Further installation of Tactician is analogous to the Linux and macOS instructions\nAlternatively, we offer an experimental, unsigned installer based on Coq\u0026rsquo;s installer for Windows. Although all basic functionality works, this version is limited because it is difficult to impossible to install additional packages, and therefore it is also difficult to impossible for Tactician to learn from such packages.\nLinux and macOS Note: On macOS the instrumentation of packages currently only works in the development version of Tactician.\nBelow are detailed instructions to install Coq and Tactician through the Opam package manager. If you are already familiar with Coq and Opam, you can find a summary here.\nPrerequisites The installation of Coq and Tactician happens through Opam. If you already have a version of Coq installed through the package manager of your linux distribution you need to install a second version via Opam. The first step is to install Opam version 2.x through your favorite package manager. You can check that the installed version is newer than 2.0 by running opam --version. Some package managers do not yet include Opam 2.0. For Ubuntu 18.04 and higher a custom ppa is available. On other systems, you can use a binary installation script.\nAfter installation, some commands need to be executed to properly configure Opam. The following command will initialize Opam\u0026rsquo;s local state and will prompt you about installing hooks into your terminal that will automatically update your PATH to include binaries installed through Opam.\nopam init --bare # Answer yes to questions As the initialization script suggests, you might want to write source ~/.bash_profile in your ~/.bashrc file. Otherwise you wil have to run eval $(opam env) everytime you start Coq from a new terminal.\nNow you need to create a switch to install Coq and Tactician in:\nopam switch create coq-switch --empty eval $(opam env) This should be all that is required to prepare your system to install Coq and Tactician.\nInstallation of Coq and Tactician To install Coq, Coqide (optional but recommended) and Tactician, run the following commands:\nopam repo add coq-released https://coq.inria.fr/opam/released opam depext -i coq coqide coq-tactician # Answer yes to all questions On some exotic linux distibutions, the command above may not know how to install system packages. In that case, you have to manually install them through your systems package manager, and then finish the installation with opam install coq coqide coq-tactician.\nAfter installation, Tactician is not immediately enabled. This can be done by running the command tactician enable. This command will add some code to your coqrc file (a file that Coq loads automatically every time it is started) that will load Tactician. Further information about why Tactician is loaded this way can be found here. If you wish to disable Tactician, this can be done with the command tactician disable.\nTrying an example Tactician should now be ready to work. To make sure of this, you can test Tactician on an example file. First, start the Coq editor using the command\ncoqide \u0026amp; Then open the example file into the editor, and play around with it (moving around the document in CoqIde happens using the arrows at the top). Make sure that the two new commands provided by Tactician, Suggest and search function properly.\nRecompiling the standard library By default, Tactician is not able to learn from the standard library. This is because the library was compiled before Tactician was installed, so it was not able to inject itself into the compilation process. We provide another package that will recompile the standard library for you. Warning: This will backup and overwrite Coq\u0026rsquo;s standard library. Upon removal of the package, the orginal files will be restored.\nopam install coq-tactician-stdlib After installation, if you have any other Coq packages installed, you should run the command tactician recompile. This will assist you in recompiling these packages, which is necessary because they have a dependency on the recompiled standard library.\nTactician has now learned from the standard library and should be able to synthesize proofs regarding it.\n"
  },
  {
    "url": "https://coq-tactician.github.io/manual/usage/",
    "title": "Usage",
    "description": "",
    "content": "After installation, it is easy to get started with Tactician. There are only two important commands, described in the section below. Below, we assume that you have executed tactician enable, so that Tactician is active when you start a new interactive document. You can try the commands below on our example file.\nBasic commands   Suggest is a query that will—as its name implies—suggest a list of tactics that may be useful to progress in the current proof state of your lemma. You can simply copy them into your interactive document and run them as any other tactic. It is not recommended to permanently keep the query Suggest in your developments.\n  search is a tactic that will try to synthesize a complete proof of the current goal. It does this based on the same suggestions as issued by Suggest. This tactic will run for as long as you let it, so when you run out of patience you might want to hit the \u0026lsquo;interrupt\u0026rsquo; button in your editor. When the tactic finds a proof, two things will happen.\n  To current goal will be finished, allowing you to move on to the next branch of the proof. This is convenient when you want to progress through the proof quickly and without any hassle.\n  Tactician will issue a caching tactic witness of the form\nsearch with cache (t1; t2; ..; tn). You can copy this witness, and replace the original invocation of search with it. The result will be that the next time you execute this command, the system will first try to execute the provided witness. If this succeeds, the command will quickly terminate so that you do not have to wait for Tactician to prove goals time and time again while you navigate through an interactive document.\nOn the other hand, if the tactic witness turns out to be invalid (presumably due to a change in a definition or the statement of the current lemma), a new proof search will automatically be initiated to attempt a recovery of the witness.\n    Auxiliary commands and usages In addition to Suggest and search, we provide the following commands for more advanced use-cases.\n  tactician ignore tac will execute the tactic tac, but while hiding it from Tacticians machine learning component. This can be useful when you use a tactic you know will confuse Tactician. One example is the unsafe tactic change_no_check, which allows the system to easily prove any proof state it wants. Note that Tactician will automatically ignore admit.\nIt is important to note that tactician ignore is not guaranteed to hide a tactic from Tactician when used as part of a larger tactic expression. For example, for the tactic expression\nsolve [tactician ignore constructor; auto]. it is guaranteed that the system will not learn from the individual tactic constructor. However, this tactic may or may not be used by Tactician as part of the larger expression. Whether or not this will happen depends on the version of Tactician and its internal settings.\n  Unset Tactician Record will disable any further tactic recording for machine learning purposes by tactician. This can later be re-enabled with Set Tactician Record. Disabling Tactician can be useful when you want to define and prove some lemmas you do not want Tactician to know about. Another useful idiom is\nUnset Tactician Record. Require Import SecretLibrary. Set Tactician Record. This will hide all the contents of SecretLibrary from Tactician.\n  It is possible and sometimes useful to perform nested invocations of search. By default, Tactician will refrain from learning from its own commands, such as search. However, this is not the case when you use it as part of a tactic expression. An example is the expression\nsolve [constructor; search]. When you execute this tactic, the search command will be part of Ltac\u0026rsquo;s backtracking behavior, as expected. Additionally, Tactician will pick up the whole expression as a future way to prove a goal. As such, when you next execute search, Tactician may start to nest these invocations with backtracking behavior. To keep this under control, nested search is bound to a depth of one.\nIf you execute the command above, but do not want Tactician to start doing nested searches, you might want to wrap it in tactician ignore:\ntactician ignore solve [constructor; search].   "
  },
  {
    "url": "https://coq-tactician.github.io/manual/coq-packages/",
    "title": "Coq packages",
    "description": "",
    "content": "Tactician has first-class support for packages installed through the Opam package manager. Below we explain how to install Coq packages in such a way that Tactician can learn from its contents. We also give recommendations on packaging your own development when you use Tactician in this development.\nInstrumenting Coq packages To instrument packages such that Tactician can learn from them during compilation/installation, you simply execute the following command:\ntactician inject After that, almost any package installed through opam install will be instrumented. There are some exceptions, such as developments that come with their own standard library. For these developments special support can be built into Tactician. Currently, there is special support for these packages:\n coq-hott  If your favorite package cannot currently be instrumented, please open an issue.\nIf at any point you want to remove Tactician instrumentation from the build process, you can run `tactician eject**. This command will also help you recompile your currently installed packages to remove Tactician support.\nNote: On macOS, due to limitations of the operating system, some packages cannot be instrumented. Currently only coq-hott is known not to work.\nPackaging developments while using Tactician When you work on a Coq development that is intended to be packaged with Opam, we recommend that you do not create a hard dependency on the coq-tactician package. This will create an unnecessary burden on your users, who might not want to use Tactician. For this reason, it is recommended that you enable Tactician in your day-to-day work by loading it through your coqrc file. The command tactician enable will help you with this.\nThis does leave the question how users can compile Tactician\u0026rsquo;s commands not having Tactician installed. To resolve this, your package can depend on coq-tactician-dummy (or you can just copy this 12 line file into your development). You can load this package using\nFrom Tactician Require Import Ltac1Dummy. The dummy package contains trivial implementations of Tactician commands. In particular:\n search will generate an error. You should modify all instances of search to include the generated witness of the form search with cache tac. The dummy version will try to use the witness, but does not perform a new search when the witness fails. The tactic tactician ignore tac is simply a wrapper for tac. The option Unset Tactician Record will do nothing. However, it will generate a warning. If you want to ignore this warning, you can surround these commands as follows: Set Warnings \u0026#34;-unknown-option\u0026#34;. Unset Tactician Record. Set Warnings \u0026#34;unknown-option\u0026#34;.  Suggest is not functional, and you should not keep this command in your development when you release it.  "
  },
  {
    "url": "https://coq-tactician.github.io/faq/",
    "title": "About Tactician",
    "description": "",
    "content": "\rWhat is Tactician?\rTactician is a tactic learner and prover for the Coq Proof Assistant. The system will help users make tactical proof decisions while they retain control over the general proof strategy. To this end, Tactician will learn from previously written tactic scripts, and either gives the user suggestions about the next tactic to be executed or altogether takes over the burden of proof synthesis. Tactician\u0026rsquo;s goal is to provide the user with a seamless, interactive, and intuitive experience together with strong, adaptive proof automation.\n\r\r Can I use Tactician in a complex project with many dependencies?\rYes, the system has first-class support for Opam, Coq\u0026rsquo;s package manager. When you install dependencies, Tactician can automatically instrument those developments and learn from them. When you work on your project, Tactician will have background knowledge on all modules you Require.\nOn the flip side, using Tactician in your project does not mean you now have a hard dependency on Tactician. When the system finds a proof, it presents you with a caching witness that you can copy into your source file. As long as this witness remains valid, you can compile your project without having the main Tactician code-base installed. You only need 10 lines of helper tactics, which you can install through the coq-tactician-dummy package, or simply copy them into your development.\n\r\r Is Tactician useful for teaching?\rWe have not yet performed a large-scale test on students, but we believe that the system may indeed be used in this capacity. Installation is straightforward and the system functions on Linux, macOS and Windows. The automation is push-button style without needing any configuration, and when a proof cannot be found, Tactician can still suggest tactics that may be useful.\n\r\r I have a great Machine Learning idea; can I implement it on top of Tactician?\rAt the moment Tactician is not open to the greater machine learning community for experimentation. However, in the future we would like to offer Tactician as a platform that allows ML-researchers to create mathematics-solving agents and put them in the hands of Coq users. For now, we are looking for beta-testers to collaborate with and give this platform a clear shape. So if you have a good machine learning for theorem proving idea, please reach out to use to see if a collaboration is possible.\n\r\r How good is Tactician?\rtodo\n\r\r What tools related to Tactician exist?\r CoqHammer is an automated reasoning tool for Coq. It translates Coq\u0026rsquo;s Calculus of Constructions into first-order logic and calls several external automatic theorem provers to prove a goal. When the external prover succeeds, an CoqHammer attempt to reconstruct this proof within Coq. Although CoqHammer and Tactician have similar goals (automatically proof lemmas for Coq), their way of achieving this goal is quite different. As such, it has been shown before that these tools are quite complementary and we highly recommend you try CoqHammer out.  \r\r "
  },
  {
    "url": "https://coq-tactician.github.io/categories/",
    "title": "Categories",
    "description": "",
    "content": ""
  },
  {
    "url": "https://coq-tactician.github.io/changelog/",
    "title": "Changelog posts",
    "description": "",
    "content": "Announcing Tactician version 1.0 beta1 We would like to announce Tactician 1.0 beta1, the first official release of Tactician. Tactician is a tactic learner and prover for the Coq Proof Assistant. The system will help users make tactical proof decisions while they retain control over the general proof strategy. To this end, Tactician will learn from previously written tactic scripts, and either gives the user suggestions about the next tactic to be executed or altogether takes over the burden of proof synthesis. Tactician’s goal is to provide the user with a seamless, interactive, and intuitive experience together with strong, adaptive proof automation.\nEven though a lot still remains to be done, with this version we believe that the system is mature enough to be used in real developments. We would like to solicit any feedback on the system you might have. Feel free to open issues in the issue tracker.\nTactician is available for Coq v8.11, v8.12, v8.13 and master and on Linux, macOS and Windows. Installation instructions can be found in the manual. An online demo can be found here. Tactician has first-class support for Opam, and can automatically learn from almost any Coq package. For the exceptions, special support can be added. Currently, special support exists for the HoTT homotopy type theory library. If tactician cannot instrument your favorite package and you would like to see support, please open an issue.\nThis release contains too many features and improvements to list exhaustively. We invite you to explore the system on your own and find them yourself. However, a sneak-peak of significant improvements are tactic discharging for sections and local parameter prediction.\nFuture direction This release of Tactician is aimed at providing Coq users with an easy to use system that can be used in real Coq developments. The next step in our grand plan is to transform Tactician into a machine learning platform, where AI-researchers can add agents to Tactician (a plugin for a plugin) using an easy-to-use API. The goal of this API is to take away the hard Coq engineering problems and only leave the hard machine learning problems.\nThis API is still under heavy development. We are therefore not yet inviting the wider AI-community to work with Tactician. However, we are looking for collaborators/beta-testers. So if you have a good machine learning idea that you would like to implement on top of Tactician, please get in touch.\n"
  },
  {
    "url": "https://coq-tactician.github.io/tags/",
    "title": "Tags",
    "description": "",
    "content": ""
  },
  {
    "url": "https://coq-tactician.github.io/",
    "title": "The Tactician",
    "description": "",
    "content": ""
  }]